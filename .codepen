{"title":"1 Million Particle Fountain (WebGL/regl)","description":"1 Million Particle Fountain (WebGL/regl)","tags":["gistpad"],"html":"<!-- See JS -->\n<div>Tap for slow mo</div>\n\n<!-- Uploading image 50637... -->\n\n<!-- Uploading image 871542... -->\n\n<img src=\"https://gist.github.com/lostintangent/786d9f20b906ad141b13102850b668b6/raw/Fri_Jan_03_2020_1578076875671.png\"\n    alt=\"image\" />","html_pre_processor":"none","js":"// Easily control the number of particles via `?p={N}` query param.\n\nconsole.clear();\n\nconst regl = createREGL();\n\nconst smallScreen = window.innerWidth < 450;\nconst dpr = window.devicePixelRatio || 1;\nconst urlParams = new URLSearchParams(window.location.search);\nconst requestedParticleCount = parseInt(urlParams.get('p'), 10);\nconst defaultParticleCount = smallScreen ? 300000 : 1000000;\nconst particleCount = requestedParticleCount || defaultParticleCount;\n\n// Use JavaScript to generate data for each particle. This data will be uploaded\n// to the GPU where the vertex shader will iterate over it.\nfunction makeParticleOffsets() {\n\tconst offsets = [];\n\tfor (let i=0; i<particleCount; i++) {\n\t\tconst offsetX = Math.random() * 2 - 1;\n\t\tconst offsetY = Math.random() * 0.9 + 0.1;\n\t\tconst offsetTime = Math.random();\n\t\toffsets.push([offsetX, offsetY, offsetTime]);\n\t}\n\treturn offsets;\n}\n\nconst drawParticles = regl({\n\tvert: `\n\t\tprecision highp float;\n\n\t\tattribute vec3 a_offset;\n\t\tuniform float u_time;\n\t\tuniform float u_pointSize;\n\t\tvarying float v_life;\n\n\t\tconst float PI = 3.14159;\n\t\tconst float lifetime = 5.0;\n\t\tconst float height = 0.92;\n\n\t\tvoid main() {\n\t\t\tfloat currentTime = u_time + a_offset.z * lifetime;\n\t\t\tv_life = mod(currentTime, lifetime) / lifetime;\n\t\t\t// First 35% of life represents first 50% of animation progress, last 65% of life\n\t\t\t// represents last 50% of animation.\n\t\t\tfloat progress = v_life < 0.35 ? (v_life / 0.35 * 0.5) : ((v_life - 0.35) / 0.65 * 0.5 + 0.5);\n\t\t\t// Further, we scale the progress based on how high the particles will go.\n\t\t\t// Lower particles will play faster, to give the fountain a better sense of speed.\n\t\t\tfloat scaledProgress = clamp(progress / pow(a_offset.y, 0.65), 0.0, 1.0);\n\t\t\tfloat x = a_offset.x * scaledProgress;\n\t\t\tfloat y = -1.0 + a_offset.y * 2.0 * height * sin(scaledProgress * PI);\n\n\t\t\tgl_PointSize = u_pointSize * ((1.0 - progress) * 0.75 + 0.25);\n\t\t\tgl_Position = vec4(x, y, 0, 1);\n\t\t}\n\t`,\n\tfrag: `\n\t\tprecision highp float;\n\n\t\tvarying float v_life;\n\n\t\t// Render a 3-stop gradient based on particle life\n\t\tconst vec3 color1 = vec3(1.0, 0.6, 0.0);\n\t\tconst vec3 color2 = vec3(0.769, 0.498, 0.945);\n\t\tconst vec3 color3 = vec3(0.0, 0.6, 1.0);\n\n\t\tvoid main() {\n\t\t\tbool firstHalf = v_life < 0.5;\n\t\t\tvec3 color = firstHalf ? mix(color1, color2, (v_life * 2.0)) : mix(color2, color3, ((v_life - 0.5) * 2.0));\n\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t}\n\t`,\n\tattributes: {\n\t\ta_offset: regl.buffer(makeParticleOffsets())\n\t},\n\tuniforms: {\n\t\tu_time: regl.prop('u_time'),\n\t\tu_pointSize: regl.prop('u_pointSize')\n\t},\n\tcount: particleCount,\n\tprimitive: 'points'\n});\n\n\nlet slowmo = false;\nlet prevTime = 0;\nlet currentTime = 0;\n\nregl.frame(({ time }) => {\n\tconst timeDelta = time - prevTime;\n\tprevTime = time;\n\tcurrentTime += slowmo ? timeDelta / 4 : timeDelta\n\tconst canvasPixels = window.innerWidth * window.innerHeight * dpr * dpr;\n\tconst particleSize = Math.sqrt(canvasPixels / particleCount);\n\tregl.clear({ color: [0, 0, 0, 1] });\n\tdrawParticles({\n\t\tu_time: currentTime,\n\t\tu_pointSize: particleSize\n\t});\n});\n\ndocument.querySelector('canvas').addEventListener('click', () => {\n\tslowmo = !slowmo;\n});\n","js_pre_processor":"none","css":"/* See JS */\n\ndiv {\n\tposition: fixed;\n\tz-index: 1;\n\twidth: 100%;\n\tpadding: 0.5em;\n\ttext-align: center;\n\tcolor: white;\n\topacity: 0;\n\tfont-family: system-ui, sans-serif;\n\tfont-size: 16px;\n\ttext-transform: uppercase;\n\tpointer-events: none;\n\tuser-select: none;\n\tanimation: instructions 8s linear;\n}\n\n@keyframes instructions {\n\t60% { opacity: 0; }\n\t65% { opacity: 0.75; }\n\t95% { opacity: 0.75; }\n}","css_pre_processor":"none","js_external":"https://npmcdn.com/regl/dist/regl.min.js"}